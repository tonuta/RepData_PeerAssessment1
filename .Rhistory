length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix_2<-(1:20, nrow=4. ncol=5)
my_matrix_2<-(1:20, nrow=4, ncol=5)
my_matrix_2<-(1:20 nrow=4, ncol=5)
my_matrix_2<-matrix(1:20, nrow=4, ncol=5)
my_matrix<-matrix(1:20, nrow=4, ncol=5)
my_matrix2<-matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
skip
--
my_matrix2 <- matrix(--1:20, nrow = 4, ncol = 5)
my_matrix2
identical(my_matrix, my_matrix2)
patients<-c("Bill", "Gina:, "Kelly", "Sean)
patients<-c("Bill", "Gina", "Kelly", "Sean)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age",
| "weight", "bp", "rating", "test")
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
exists()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5!=7
5!==7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
Type: 5 > 8 || 6 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints)
which(ints>7)
any(ints<0)
all(ints>0)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
Sys.Date()
mean(c(2,4,5))
swirl()
rm(list=ls())
swirl()
install.packages("swirl")
install.packages("swirl")
rm(list=ls())
library(swirl)
install_from_swirl("R Programming")
swirl()
Sys.Date()
mean(c(2,4,5))
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class()
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
The Sys.Date()
Sys.Date()
mean(c(2,4,5))
swirl()
editor(file = file, title = title)
boring_function.R
read(boring_function.R)
options(editor = "internal")
swirls()
swirl()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0)
)
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))
submit()
mad_libs(place = "Bucharest", adjustive = "wonderful", noun = "tiger")
submit()
"I" %p% "love" %p% "R!"
rm(list=ls())
library(datasets)
data(iris)
?iris
mean(Sepal.Length, virginica)
mean(Sepal.Length(virginica)
)
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls
debug(ls)
ls
iris
iris3
cars
library(datasets)
data(mtcars)
?mtcars
mtcars
rm(list =ls())
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
type as.character(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_c0l0rs, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6)
)
unique_vals <- lapply(flags,unique)
print(unique_vals)
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
exit
clr
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, nrow = 10)
head(plants, 10)
tail(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS()
LETTERS
sample(LETTERS)
sample(1:100, 2, prob = c(0.3, 0.7))
sample.int(100, 2, prob = c(0.3, 0.7))
sample.int(100, size = c(0,1), replace = TRUE, prob = c(0.3, 0.7))
sample.int(100, size = c(0,1), replace = TRUE)
flips <- sample(c(0,1), 100,replace = TRUE, prob = c(0.3, 0.7))
flips
sum(1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- my_pois(colMeans())
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y =cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl)
boxplot(formula = mpg ~ cyl)
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
rm(list=ls())
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages(httr)
library("httr", lib.loc="~/R/win-library/3.2")
install.packages(httr)
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("devtools")
library(devtools)
devtools::install_github("ankitrohatgi/digitizeR")
library(digitizerR)
library(digitizeR)
app <- wpd.launch()
app <- wpd.launch()
library(digitizeR)
app <- wpd.launch()
install.packages("digitize", repos="http://R-Forge.R-project.org")
library(digitizeR)
library(digitize)
install.packages("digitize", repos="http://R-Forge.R-project.org")
library(digitize)
library("digitizeR", lib.loc="~/R/win-library/3.2")
library("digitizeR")
app <- wpd.launch()
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head()
head
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, color = "blue")
boxplot(ppm,col="blue")
abline(12)
abline(h = 12)
hist(ppm)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks =100)
rug(ppm)
hist(ppm, col = "green")
abline(v =12, lwd =2)
abline(v = median(ppm), lwd =4, col ="magenta")
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(region)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, col = "red")
boxplot(pm25~region, data - pollution, col = "red")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
test <- subset(pollution, "east"= TRUE)
east <- subset(pollution,region=="east")
head(east)
hist(east~pm25, col = "green")
hist(east, col = "green")
hist(east, col = "green")
hist(east, col = "green")
hist(pm25, col = "green")
hist(pm25~east, col = "green")
hist(east, col = "green")
hist(pm25~east, col = "green")
hist(pm25 ~ east, col = "green")
hist(pm25 ~ east)
hist(pm25)
hist(east$pm25, col = "green")
subset(west$pm25, col = "green")
hist(subset$pm25, col = "green")
hist(subset$pm25, pm25 == "west", col = "green")
hist(subset$pm25, reg == "west", col = "green")
hist(subset$pm25, region == "west", col = "green")
hist(pm25, region == "west", col = "green")
west <- subset(pollution,region=="west")
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(pollution)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd =2, lty =2)
plot(pollution$latitude, ppm, col = pollution$latitude)
plot(pollution$latitude, ppm, col = pollution$region)
abline( h =12, lwd = 2, lty =2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1)
)
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, title = "west")
plot(west$latitude, west$pm25, main = "West")
plot(west$latitude, west$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
?Devices
with(dataset, plot (eruptions, waiting))
with(faithful, plot (eruptions, waiting))
title(main =="Old Faithful  Geyser data")
title(main = "Old Faithful  Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot (eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png" )
dev.off()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
setwd("I:/Coursera/Data Science Specialization/Course5_Reproducible Research/Assignments/Activity monitoring data")
install.packages("knitr")
library(knitr)
knit2html(“plot1.Rmd”)
knit2html(“plot1.Rmd”)
knit2html(plot1.Rmd)
knit2html('plot1.Rmd')
install.packages("markdown")
library(markdown)
setwd("I:/Coursera/Data Science Specialization/Course5_Reproducible Research/Assignments/Activity monitoring data")
?read.table
install.packages("utils")
install.packages("utils")
